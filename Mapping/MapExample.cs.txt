/*
 
 Exempelfil som visar sätt att mappa relationer med "mapping by code":
 - one-to-many
 - many-to-many

 */

using NHibernate.Cfg.MappingSchema;
using NHibernate.Mapping.ByCode;

namespace NHibernateStart.Mapping
{
    public class MapExample
    {
        private readonly ModelMapper _modelMapper;

        public MapExample()
        {
            _modelMapper = new ModelMapper();
        }

        public HbmMapping Map()
        {
            MapBlogPost();
            MapComment();
            MapTag();

            return _modelMapper.CompileMappingForAllExplicitlyAddedEntities();
        }

        private void MapBlogPost()
        {
            _modelMapper.Class<BlogPost>(e =>
            {
                e.Id(p => p.Id, p => p.Generator(Generators.GuidComb));
                e.Property(p => p.Title);
                e.Property(p => p.Description);
                e.Property(p => p.Created);
                e.Property(p => p.Author);
                e.Property(p => p.Updated, m => m.Column("Uppdaterad"));

                e.Set(x => x.Tags, collectionMapping =>
                {
                    collectionMapping.Table("BlogPostsTags");
                    collectionMapping.Cascade(Cascade.None);
                    collectionMapping.Key(keyMap => keyMap.Column("BlogPostId"));
                }, map => map.ManyToMany(p => p.Column("TagId")));

                e.Set(p => p.Comments, p =>
                {
                    p.Inverse(true);
                    p.Cascade(Cascade.All);
                    p.Key(k => k.Column(col => col.Name("BlogPostId")));
                }, p => p.OneToMany());
            });

        }

        private void MapComment()
        {
            _modelMapper.Class<Comment>(e =>
            {
                e.Id(p => p.Id, p => p.Generator(Generators.GuidComb));

                e.Property(p => p.DateTime);
                e.Property(p => p.Author);
                e.Property(p => p.CommentText);

                e.ManyToOne(p => p.BlogPost, mapper =>
                {
                    mapper.Column("BlogPostId");
                    mapper.NotNullable(true);
                    mapper.Cascade(Cascade.None);
                });
            });

        }

        private void MapTag()
        {
            _modelMapper.Class<Tag>(e =>
            {
                e.Id(p => p.Id, p => p.Generator(Generators.GuidComb));

                e.Property(p => p.Name, p => p.Unique(true));

                e.Set(x => x.BlogPosts, collectionMapping =>
                {
                    collectionMapping.Inverse(true);
                    collectionMapping.Table("BlogPostsTags");
                    collectionMapping.Cascade(Cascade.None);
                    collectionMapping.Key(keyMap => keyMap.Column("TagId"));

                }, map => map.ManyToMany(p => p.Column("BlogPostId")));

            });

        }

    }
}
